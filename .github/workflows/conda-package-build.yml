name: Building Package using Conda

on:
  workflow_call:
    inputs:
      conda-directory:
        description: 'Directory containing the conda recipe. Default is "conda".'
        default: "conda"
        required: false
        type: string
      python-minor-version:
        description: 'Python minor version on which to build / deploy the package. Default is "[9, 10, 11, 12]" '
        default: "[9, 10, 11, 12]"
        required: false
        type: string
      operating-system:
        description: 'OS on which to build / deploy the package. Default is "[ ubuntu-latest , macos-latest , macos-13 , windows-latest ]" '
        default: '["ubuntu-latest", "macos-latest", "macos-13", "windows-latest"]'
        required: false
        type: string
      conda-channels:
        description: 'Conda channels used during the building phase of the package. Default is the value of the GitHub variable `ANACONDA_CHANNELS`, or, if not set, `openalea3,conda-forge` '
        default: ${{ vars.ANACONDA_CHANNELS || 'conda-forge,openalea3' }}
        required: false
        type: string
      build-options:
        description: 'Options to be passed to conda build command. Default is "" (no options).'
        default: ''
        required: false
        type: string
      promote_from:
        description: 'Label of Annaconda channel to promote from if promotion to main is activated. Default is "rc" (release candidate)'
        default: 'rc'
        required: false
        type: string
      force_label:
        description: 'Force label of Anaconda channel to upload to. If not "false", force_label is used as label. Default is "false" (do not force, let workflow decide).'
        default: 'determine_label'
        required: false
        type: string
      force_suffix:
        description: 'Force suffix for package build_string. If not "false", force_suffix is used as suffix. Default is "false" (do not force, let workflow decide)'
        default: 'determine_suffix'
        required: false
        type: string
      force_all_os:
        description: 'Force build/publish/test steps on all os defined above. Default is "false" (do not force, let workflow decide)'
        default: 'false'
        required: false
        type: string
      force_all_py:
        description: 'Force build/publish/test steps on all py versions. Default is "false" (do not force, let workflow decide)'
        default: 'false'
        required: false
        type: string
      force_build_and_publish:
        description: 'Force calling build_and_publish action. Default is "false" (do not force, let workflow decide)'
        default: 'false'
        required: false
        type: string        
      force_publish:
        description: 'Force publication on Anaconda. Default is "false" (do not force, let workflow decide)'
        default: 'false'
        required: false
        type: string
      force_promote:
        description: 'Force promotion from label <promote_from> to label "main". Default is "false" (do not force, let workflow decide)'
        default: 'false'
        required: false
        type: string
    secrets:
      anaconda_token:
        description: 'Anaconda access Token (required)'
        required: true

# Openalea strategy for build-publish-promote CI (triggered on: push: all branches (*), tags:v*, pull-request and release)
jobs:
  set-matrix:
    runs-on: ubuntu-latest
    env:
      ALL_OS: ${{ inputs.force_all_os == 'true' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.event_name == 'pull_request' || startsWith(github.ref, 'refs/tags/v') }}
      ALL_PY: ${{ inputs.force_all_py == 'true' || startsWith(github.ref, 'refs/tags/v') }}
      OS_LIST: ${{ inputs.operating-system }}
      PY_LIST: ${{ inputs.python-minor-version }}
    outputs:
      os: ${{ steps.set.outputs.os }}
      py: ${{ steps.set.outputs.py }}
    steps:
    - id: set
      run: |
       if [[ "$ALL_OS" == "true" ]]; then
        os="$OS_LIST"
       else
        os='["ubuntu-latest"]'
       fi
       if [[ "$ALL_PY" == "TRUE" ]]; then
        py="$PY_LIST"
       else
        py='[12]'
       fi
       echo "Selected operating systems: $os"
       echo "Selected Python minor versions: $py"
       # Export as job outputs
       echo "os=$os" >> $GITHUB_OUTPUT
       echo "py=$py" >> $GITHUB_OUTPUT
  # build-and-publish:
    # needs: set-matrix
    # name: ${{ matrix.os }}, Python 3.${{ matrix.python-minor-version }} for conda deployment
    # #skip this job on release
    # if: ${{ (inputs.force_build_and_publish == 'true') || (github.event_name != 'release') }}
    # #launch multiple runners on matrix jobs
    # runs-on: ${{ matrix.os }}
    # #Adadapt build matrix strategy depending on trigerring event
    # strategy:
      # fail-fast: false
      # matrix:
        # os: ${{ fromJson(needs.set-matrix.outputs.os) }}
        # python-minor-version: ${{ fromJson(needs.set-matrix.outputs.py) }}
    # steps:
    # - name: Checkout
      # uses: actions/checkout@v4
      # with:
        # fetch-depth: 0
        # #Tags are required for GIT_DESCRIBE_TAG conda build version control
        # fetch-tags: true
    # #publish only on pushes to master (commit or tags)
    # - name: Determine publication
      # uses: haya14busa/action-cond@v1
      # id: determine_publish
      # with:
        # cond: ${{ (inputs.force_publish == 'true') || (github.ref == 'refs/heads/master') || (github.ref == 'refs/heads/main') || (startsWith(github.ref, 'refs/tags/v')) }}
        # if_true: 'true'
        # if_false: 'false'
    # #select label :  forced_label (if defined) or 'rc' for tags, 'dev' otherwise 'dev'
    # - name: Determine contextual label
      # uses: haya14busa/action-cond@v1
      # id: determine_contextual_label
      # with:
        # cond: ${{ (startsWith(github.ref, 'refs/tags/v')) }}
        # if_true: 'rc'
        # if_false: 'dev'
    # - name: Determine label
      # uses: haya14busa/action-cond@v1
      # id: determine_label
      # with:
        # cond: ${{ (inputs.force_label == 'false') }}
        # if_true: ${{ steps.determine_contextual_label.outputs.value }}
        # if_false: ${{ inputs.force_label }}
    # #select suffix: forced_suffix (if defined), or '' (no suffix) for tags, otherwise '_dev'
    # - name: Determine contextual suffix
      # uses: haya14busa/action-cond@v1
      # id: determine_contextual_suffix
      # with:
        # cond: ${{ (startsWith(github.ref, 'refs/tags/v')) }}
        # if_true: ''
        # if_false: '_dev'
    # - name: Determine suffix
      # uses: haya14busa/action-cond@v1
      # id: determine_suffix
      # with:
        # cond: ${{ (inputs.force_suffix == 'false') }}
        # if_true: ${{ steps.determine_contextual_suffix.outputs.value }}
        # if_false: ${{ inputs.force_suffix }}
    # #call reusable build_and_publish action
    # - name: Build and Publish Action Call
      # uses: openalea/action-build-publish-anaconda@conda_forge_pinning
      # with:
        # conda: ${{ inputs.conda-directory }}
        # condapython: ${{ fromJson(inputs.python-minor-version)[fromJson(inputs.python-minor-version).length - 1] }}
        # python: ${{ matrix.python-minor-version }}
        # token: ${{ secrets.anaconda_token }}
        # channels: ${{ inputs.conda-channels }}
        # build-options: ${{ inputs.build-options }}        
        # label: ${{ steps.determine_label.outputs.value }}
        # suffix: ${{ steps.determine_suffix.outputs.value }}
        # publish: ${{ steps.determine_publish.outputs.value }}
  # #end job
  # promote-to-main:
    # name: Promoting to main label
    # runs-on: ubuntu-latest
    # #ensure it runs after build_and_publish (if tag & release are created simultaneously) 
    # needs: build-and-publish
    # if: ${{ (inputs.force_promote == 'true' || github.event_name == 'release') && (needs.build-and-publish.result == 'skipped' || needs.build-and-publish.result == 'success') }}
    # steps:
    # - name: Promote to main Action Call
      # uses: openalea/action-build-publish-anaconda/promote_to_main@main
      # with:
        # token: ${{ secrets.anaconda_token }}
        # promote_from: ${{ inputs.promote_from }}
